<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>两小题算法</title>
    <link href="/2021/11/09/leetcode-1/"/>
    <url>/2021/11/09/leetcode-1/</url>
    
    <content type="html"><![CDATA[<ol><li><a href="https://leetcode-cn.com/problems/xu-lie-hua-er-cha-shu-lcof/">剑指 Offer 37. 序列化二叉树</a></li></ol><ul><li>序列化(serialize)，只需要使用前序遍历(preorder)算法对二叉树进行遍历即可</li><li>反序列化(deserialze)，需要将序列化即前序遍历的结果转化为二叉树结构，同样地，可以递归的构建树结构。这时候可以添加标记cnt，用来记录当前构建的树节点在前序遍历中的位置。值得注意的是，在递归中，每次的参数data是不变的，只有cnt在增加，通过cnt可以直接定位到当前节点的值。</li></ul><hr><ol start="2"><li><a href="https://leetcode-cn.com/problems/zi-fu-chuan-de-pai-lie-lcof/">剑指 Offer 38. 字符串的排列</a></li></ol><ul><li>首先考虑没有重复字符的情况。排列组合问题一般的解题思路是使用递归实现回溯法，回溯比较好理解，分为“进入”与“退出”两部分，比如首先将某个元素添加到数组中，在最后需要将这个元素从数组中弹出。关键在于如何实现递归。</li><li>考虑递归的结束条件。这个相对比较容易，当某个排列的长度等于原字符串的长度时，将这条记录导出，同时函数返回。</li><li>考虑缩减规模。当遍历到某个元素时，下一步是递归的排列除了这个元素剩下的部分，在字符串中，将前面的部分和后面的部分合并，成为新字符串，实现了规模的缩减。</li><li>考虑如何实现全部的排列。（细节）每个元素的重要性都是一样的，因此对原始字符串中的每个元素都同时进行相应的处理。考虑使用循环，循环的总体是当前字符串（如上一段所说，每次这个字符串每次都是相对缩减的，因此最终会达到到结束的条件的。），对每个字符串做同样的处理。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">helper</span>(<span class="hljs-params">string, permute</span>):</span><br><span class="hljs-keyword">if</span> permute与原始string长度相等:<br>permute导出<br><span class="hljs-keyword">return</span><br><span class="hljs-keyword">for</span> idx, char <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(string):<br>permute与char合并<br><span class="hljs-comment"># 缩减规模</span><br>self.helper(string idx前部分+string idx+<span class="hljs-number">1</span>后部分, permute)<br>permute去掉char<br></code></pre></td></tr></table></figure></li><li>如果有重复元素，在导出时，使用set结构，去重</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
